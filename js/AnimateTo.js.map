{"version":3,"sources":["AnimateTo.js"],"names":[],"mappingsfile":"AnimateTo.js","sourcesContent":["/************************************************ \r\nAnimate To\r\nCopyright (c) 2014-2015 Dongxu Ren  http://www.rendxx.com/\r\n\r\nLicense: MIT (http://www.opensource.org/licenses/mit-license.php)\r\nVersion: 0.2.2\r\nUpdate: 2015-09-21\r\n\r\nDescription:\r\n    Create animation for Css3 2D-transforms.\r\n    Available transforms includes: rotate / translate / scale\r\n\r\n    This also works in IE 7/8, but some CSS attributes are used to handle the offset. Please read the document for Transform 2D for detail.\r\n   \r\nCompatibility:\r\n    Chrome; Fire Fox; Safari; Edge; IE 9-11; IE 7,8;\r\n \r\nDependency:\r\n    jQuery\r\n    Transform2D\r\n    \r\nAPI-Base:\r\n    $(ele).animateTo(opts)\r\n        - opts: {transfrom, duration, easing, onStep, onComplete }\r\n            - transform: transformation accept 2 kinds of value: number or \"+=\" / \"-=\" number\r\n            if a number is given, element will transform to it.\r\n            if a string start with \"+=\" or \"-=\" is given, the element will increase/decrease its transform value, which means multiple transformation can be applied in same time.\r\n            {\r\n                rotate: (number)\r\n                scaleX: (number)\r\n                scaleY: (number)\r\n                translateX: (number)\r\n                translateY: (number)\r\n            }\r\n            - duration: duration of the animation (ms)\r\n            - easing: name of easing function\r\n            - onStep: callback function fired on every step\r\n            - onComplete: callback function when animation complete\r\n\r\n    $(ele).animateTo(transfrom, duration)\r\n    \r\n    $(ele).animateTo(transfrom, duration, onComplete)\r\n    \r\n    $(ele).animateTo(transfrom, duration, easing, onComplete)\r\n\r\n************************************************/\r\n\r\n\r\n(function ($) {\r\n    \"use strict\";\r\n    var _keyName = \"rAnimateTo\";\r\n    var _intervalTime = 40;\r\n\r\n    var _code = 0;\r\n    var getCode = function () {\r\n        _code = (_code + 1) % 1000;\r\n        return _code;\r\n    };\r\n\r\n    var nextStep = function (code, ele, transformQueue, step, onStep, onComplete) {\r\n        var codeList = ele.data(_keyName);\r\n        if (codeList == null) return; // being stoped \r\n        if (!codeList.hasOwnProperty(code)) {\r\n            if (codeList.hasOwnProperty(\"end\")) {\r\n                delete codeList[\"end\"];\r\n                ele.data(_keyName, codeList);\r\n                if (onComplete != null) onComplete();\r\n            }\r\n        }\r\n        if (step < transformQueue.length) {\r\n            ele.transform2D(transformQueue[step]);\r\n            if (onStep != null) onStep(transformQueue[step]);\r\n            setTimeout(function () { nextStep(code, ele, transformQueue, step + 1, onStep, onComplete); }, _intervalTime);\r\n        } else {\r\n            delete codeList[code];\r\n            ele.data(_keyName, codeList);\r\n            if (onComplete != null) onComplete();\r\n        }\r\n    };\r\n    \r\n    // return a list of tranform data for every step \r\n    var createAnimationQueue = function (ele, transform, easing, stepNum) {\r\n        var modify = {};\r\n        var current = ele.transform2D();\r\n        for (var i in transform) {\r\n            if (transform.hasOwnProperty(i)){\r\n                if (transform[i][0]) modify[i] = transform[i][1] - current[i];\r\n                else modify[i] = transform[i][1];\r\n            }\r\n        }\r\n\r\n        // easing\r\n        var _easingFunc = easingFunc[\"linear\"];\r\n        if (easingFunc.hasOwnProperty(easing)) _easingFunc = easingFunc[easing];\r\n\r\n        // transform\r\n        var tmp = {};\r\n        var dataQueue = [];\r\n        var i = 0;\r\n        for (; i < stepNum-1; i++) {\r\n            dataQueue[i] = {};\r\n            for (var key in modify) {\r\n                if (transform[key][0])\r\n                    dataQueue[i][key] = current[key] + (modify[key] * _easingFunc(i / stepNum));\r\n                else {\r\n                    var t = modify[key] * _easingFunc(i / stepNum);\r\n                    dataQueue[i][key] = \"+=\"+(t - tmp[key]);\r\n                    tmp[key] = t;\r\n                }\r\n            }\r\n        }\r\n        \r\n        dataQueue[i] = {};\r\n        for (var key in transform) {\r\n            if (transform[key][0])\r\n                dataQueue[i][key] = current[key] + modify[key];\r\n            else {\r\n                var t = modify[key] * _easingFunc(i / stepNum);\r\n                dataQueue[i][key] = \"+=\" + (t - tmp[key]);\r\n            }\r\n        }\r\n\r\n        return dataQueue;\r\n    };\r\n\r\n    $.fn.animateStop = function (jumpToEnd) {\r\n        this.each(function () {\r\n            if (jumpToEnd === true) $(this).data(_keyName, { end: true });\r\n            else {\r\n                $(this).removeData(_keyName);\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n\r\n\r\n    // parse the option to processed \r\n    // processed data: [mark, value]\r\n    // mark: true: equal to,  false:add\r\n    var _parseOpts = function (options) {\r\n        // get opts based on current transform data\r\n        var input;\r\n        var tmp;\r\n        var operationIdx = -1;\r\n        var opts = {};\r\n\r\n        for (var i in options) {\r\n            if (options.hasOwnProperty(i) && options[i] != null) {\r\n                input = options[i];\r\n                if (typeof input == \"string\") {\r\n                    operationIdx = input.indexOf(\"+=\");\r\n                    if (operationIdx != -1) {\r\n                        input = parseFloat(input.substring(operationIdx + 2));\r\n                        if (input == input) opts[i] = [false,input];\r\n                        continue;\r\n                    }\r\n\r\n                    operationIdx = input.indexOf(\"-=\");\r\n                    if (operationIdx != -1) {\r\n                        input = -parseFloat(input.substring(operationIdx + 2));\r\n                        if (input == input) opts[i] = [false, input];\r\n                        continue;\r\n                    }\r\n\r\n                    input = parseFloat(input);\r\n                    if (input == input) opts[i] = [true, input];\r\n                } else if (typeof input == \"number\")  {\r\n                    opts[i] = [true, input];\r\n                }\r\n            }\r\n        }\r\n\r\n        return opts;\r\n    };\r\n\r\n    $.fn.animateTo = function () {\r\n        // handle arguements\r\n        if (arguments == null || arguments.length == 0) return;\r\n        var options = $.extend(true, {}, $.fn.animateTo.defaults);\r\n        if (arguments.length == 1) {   // [opts]\r\n            $.extend(true, options, arguments[0]);\r\n        } else if (arguments.length == 2) { // [transfrom, duration]\r\n            $.extend(true, options.transform, arguments[0]);\r\n            if (arguments[1] != null) options.duration = arguments[1];\r\n        } else if (arguments.length == 3) { // [transfrom, duration, onComplete]\r\n            $.extend(true, options.transform, arguments[0]);\r\n            if (arguments[1] != null) options.duration = arguments[1];\r\n            options.onComplete = arguments[2];\r\n        } else if (arguments.length == 4) { // [transfrom, duration, easing, onComplete]\r\n            $.extend(true, options.transform, arguments[0]);\r\n            if (arguments[1] != null) options.duration = arguments[1];\r\n            options.easing = arguments[2];\r\n            options.onComplete = arguments[3];\r\n        }\r\n\r\n        if (options.duration === 0) return;\r\n        var code = getCode();\r\n        var stepNum = Math.round(options.duration / _intervalTime);\r\n        var transform = _parseOpts(options.transform);\r\n        this.each(function () {\r\n            var $this = $(this);\r\n            var transformQueue = createAnimationQueue($this, transform, options.easing, stepNum);\r\n\r\n            var codeList = $this.data(_keyName) || {};\r\n            codeList[code] = true;\r\n            $this.data(_keyName, codeList);\r\n            nextStep(code, $this, transformQueue, 0, options.onStep, options.onComplete);\r\n        });\r\n        return this;\r\n    };\r\n    $.fn.animateTo.defaults = {\r\n        transform: {},\r\n        duration: 200,\r\n        easing: \"linear\",\r\n        onStep: null,\r\n        onComplete: null\r\n    };\r\n\r\n    // Easing function\r\n    // Inspired from https://gist.github.com/gre/1650294\r\n    // t value for the range [0, 1]\r\n    var easingFunc = {\r\n        // no easing, no acceleration\r\n        linear: function (t) { return t },\r\n        // accelerating from zero velocity\r\n        easeInQuad: function (t) { return t * t },\r\n        // decelerating to zero velocity\r\n        easeOutQuad: function (t) { return t * (2 - t) },\r\n        // acceleration until halfway, then deceleration\r\n        easeInOutQuad: function (t) { return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t },\r\n        // accelerating from zero velocity \r\n        easeInCubic: function (t) { return t * t * t },\r\n        // decelerating to zero velocity \r\n        easeOutCubic: function (t) { return (--t) * t * t + 1 },\r\n        // acceleration until halfway, then deceleration \r\n        easeInOutCubic: function (t) { return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1 },\r\n        // accelerating from zero velocity \r\n        easeInQuart: function (t) { return t * t * t * t },\r\n        // decelerating to zero velocity \r\n        easeOutQuart: function (t) { return 1 - (--t) * t * t * t },\r\n        // acceleration until halfway, then deceleration\r\n        easeInOutQuart: function (t) { return t < .5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t },\r\n        // accelerating from zero velocity\r\n        easeInQuint: function (t) { return t * t * t * t * t },\r\n        // decelerating to zero velocity\r\n        easeOutQuint: function (t) { return 1 + (--t) * t * t * t * t },\r\n        // acceleration until halfway, then deceleration \r\n        easeInOutQuint: function (t) { return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t }\r\n    };\r\n})(jQuery);"],"sourceRoot":"/source/"}