{"version":3,"sources":["AnimateTo.js"],"names":["$","_keyName","_intervalTime","_code","getCode","nextStep","code","ele","transformQueue","step","onStep","codeList","data","hasOwnProperty","length","transform2D","setTimeout","onComplete","createAnimationQueue","transform","easing","stepNum","modify","current","i","_easingFunc","easingFunc","tmp","dataQueue","key","t","fn","animateStop","this","each","removeData","_parseOpts","options","input","operationIdx","opts","indexOf","parseFloat","substring","animateTo","arguments","extend","defaults","duration","Math","round","$this","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","jQuery"],"mappings":"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","file":"AnimateTo.min.js","sourcesContent":["/************************************************ \r\nAnimate To\r\nCopyright (c) 2014-2015 Dongxu Ren  http://www.rendxx.com/\r\n\r\nLicense: MIT (http://www.opensource.org/licenses/mit-license.php)\r\nVersion: 0.2.3\r\nUpdate: 2015-10-29\r\n\r\nDescription:\r\n    Create animation for Css3 2D-transforms.\r\n    Available transforms includes: rotate / translate / scale\r\n\r\n    This also works in IE 7/8, but some CSS attributes are used to handle the offset. Please read the document for Transform 2D for detail.\r\n   \r\nCompatibility:\r\n    Chrome; Fire Fox; Safari; Edge; IE 9-11; IE 7,8;\r\n \r\nDependency:\r\n    jQuery\r\n    Transform2D\r\n    \r\nAPI-Base:\r\n    $(ele).animateTo(opts)\r\n        - opts: {transform, duration, easing, onStep, onComplete }\r\n            - transform: transformation accept 2 kinds of value: number or \"+=\" / \"-=\" number\r\n            if a number is given, element will transform to it.\r\n            if a string start with \"+=\" or \"-=\" is given, the element will increase/decrease its transform value, which means multiple transformation can be applied in same time.\r\n            {\r\n                rotate: (number)\r\n                scaleX: (number)\r\n                scaleY: (number)\r\n                translateX: (number)\r\n                translateY: (number)\r\n            }\r\n            - duration: duration of the animation (ms)\r\n            - easing: name of easing function\r\n            - onStep: callback function fired on every step\r\n            - onComplete: callback function when animation complete\r\n\r\n    $(ele).animateTo(transform, duration)\r\n    \r\n    $(ele).animateTo(transform, duration, onComplete)\r\n    \r\n    $(ele).animateTo(transform, duration, easing, onComplete)\r\n\r\n************************************************/\r\n\r\n\r\n(function ($) {\r\n    \"use strict\";\r\n    var _keyName = \"rAnimateTo\";\r\n    var _intervalTime = 40;\r\n\r\n    var _code = 0;\r\n    var getCode = function () {\r\n        _code = (_code + 1) % 1000;\r\n        return _code;\r\n    };\r\n\r\n    var nextStep = function (code, ele, transformQueue, step, onStep) {\r\n        var codeList = ele.data(_keyName);\r\n        if (codeList == null) return; // being stoped \r\n        if (!codeList.hasOwnProperty(code)) {\r\n            return;\r\n        }\r\n        if (step < transformQueue.length) {\r\n            ele.transform2D(transformQueue[step]);\r\n            if (onStep != null) onStep(transformQueue[step]);\r\n            setTimeout(function () { nextStep(code, ele, transformQueue, step + 1, onStep); }, _intervalTime);\r\n        } else {\r\n            var onComplete = codeList[code];\r\n            delete codeList[code];\r\n            ele.data(_keyName, codeList);\r\n            if (onComplete != null) onComplete();\r\n        }\r\n    };\r\n    \r\n    // return a list of tranform data for every step \r\n    var createAnimationQueue = function (ele, transform, easing, stepNum) {\r\n        var modify = {};\r\n        var current = ele.transform2D();\r\n        for (var i in transform) {\r\n            if (transform.hasOwnProperty(i)){\r\n                if (transform[i][0]) modify[i] = transform[i][1] - current[i];\r\n                else modify[i] = transform[i][1];\r\n            }\r\n        }\r\n\r\n        // easing\r\n        var _easingFunc = easingFunc[\"linear\"];\r\n        if (easingFunc.hasOwnProperty(easing)) _easingFunc = easingFunc[easing];\r\n\r\n        // transform\r\n        var tmp = {};\r\n        var dataQueue = [];\r\n        var i = 0;\r\n        for (; i < stepNum-1; i++) {\r\n            dataQueue[i] = {};\r\n            for (var key in modify) {\r\n                if (transform[key][0])\r\n                    dataQueue[i][key] = current[key] + (modify[key] * _easingFunc(i / stepNum));\r\n                else {\r\n                    var t = modify[key] * _easingFunc(i / stepNum);\r\n                    dataQueue[i][key] = \"+=\"+(t - tmp[key]);\r\n                    tmp[key] = t;\r\n                }\r\n            }\r\n        }\r\n        \r\n        dataQueue[i] = {};\r\n        for (var key in transform) {\r\n            if (transform[key][0])\r\n                dataQueue[i][key] = current[key] + modify[key];\r\n            else {\r\n                var t = modify[key] * _easingFunc(i / stepNum);\r\n                dataQueue[i][key] = \"+=\" + (t - tmp[key]);\r\n            }\r\n        }\r\n\r\n        return dataQueue;\r\n    };\r\n\r\n    $.fn.animateStop = function () {\r\n        this.each(function () {\r\n            $(this).removeData(_keyName);\r\n        });\r\n        return this;\r\n    };\r\n\r\n\r\n    // parse the option to processed \r\n    // processed data: [mark, value]\r\n    // mark: true: equal to,  false:add\r\n    var _parseOpts = function (options) {\r\n        // get opts based on current transform data\r\n        var input;\r\n        var tmp;\r\n        var operationIdx = -1;\r\n        var opts = {};\r\n\r\n        for (var i in options) {\r\n            if (options.hasOwnProperty(i) && options[i] != null) {\r\n                input = options[i];\r\n                if (typeof input == \"string\") {\r\n                    operationIdx = input.indexOf(\"+=\");\r\n                    if (operationIdx != -1) {\r\n                        input = parseFloat(input.substring(operationIdx + 2));\r\n                        if (input == input) opts[i] = [false,input];\r\n                        continue;\r\n                    }\r\n\r\n                    operationIdx = input.indexOf(\"-=\");\r\n                    if (operationIdx != -1) {\r\n                        input = -parseFloat(input.substring(operationIdx + 2));\r\n                        if (input == input) opts[i] = [false, input];\r\n                        continue;\r\n                    }\r\n\r\n                    input = parseFloat(input);\r\n                    if (input == input) opts[i] = [true, input];\r\n                } else if (typeof input == \"number\")  {\r\n                    opts[i] = [true, input];\r\n                }\r\n            }\r\n        }\r\n\r\n        return opts;\r\n    };\r\n\r\n    $.fn.animateTo = function () {\r\n        // handle arguements\r\n        if (arguments == null || arguments.length == 0) return;\r\n        var options = $.extend(true, {}, $.fn.animateTo.defaults);\r\n        if (arguments.length == 1) {   // [opts]\r\n            $.extend(true, options, arguments[0]);\r\n        } else if (arguments.length == 2) { // [transform, duration]\r\n            $.extend(true, options.transform, arguments[0]);\r\n            if (arguments[1] != null) options.duration = arguments[1];\r\n        } else if (arguments.length == 3) { // [transform, duration, onComplete]\r\n            $.extend(true, options.transform, arguments[0]);\r\n            if (arguments[1] != null) options.duration = arguments[1];\r\n            options.onComplete = arguments[2];\r\n        } else if (arguments.length == 4) { // [transform, duration, easing, onComplete]\r\n            $.extend(true, options.transform, arguments[0]);\r\n            if (arguments[1] != null) options.duration = arguments[1];\r\n            options.easing = arguments[2];\r\n            options.onComplete = arguments[3];\r\n        }\r\n\r\n        if (options.duration === 0) return;\r\n        var code = getCode();\r\n        var stepNum = Math.round(options.duration / _intervalTime);\r\n        var transform = _parseOpts(options.transform);\r\n        this.each(function () {\r\n            var $this = $(this);\r\n            var transformQueue = createAnimationQueue($this, transform, options.easing, stepNum);\r\n\r\n            // codelist is a map of callback pair: [code: onComplete]\r\n            var codeList = $this.data(_keyName) || {};\r\n            codeList[code] = options.onComplete;\r\n            $this.data(_keyName, codeList);\r\n            nextStep(code, $this, transformQueue, 0, options.onStep);\r\n        });\r\n        return this;\r\n    };\r\n    $.fn.animateTo.defaults = {\r\n        transform: {},\r\n        duration: 200,\r\n        easing: \"linear\",\r\n        onStep: null,\r\n        onComplete: null\r\n    };\r\n\r\n    // Easing function\r\n    // Inspired from https://gist.github.com/gre/1650294\r\n    // t value for the range [0, 1]\r\n    var easingFunc = {\r\n        // no easing, no acceleration\r\n        linear: function (t) { return t },\r\n        // accelerating from zero velocity\r\n        easeInQuad: function (t) { return t * t },\r\n        // decelerating to zero velocity\r\n        easeOutQuad: function (t) { return t * (2 - t) },\r\n        // acceleration until halfway, then deceleration\r\n        easeInOutQuad: function (t) { return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t },\r\n        // accelerating from zero velocity \r\n        easeInCubic: function (t) { return t * t * t },\r\n        // decelerating to zero velocity \r\n        easeOutCubic: function (t) { return (--t) * t * t + 1 },\r\n        // acceleration until halfway, then deceleration \r\n        easeInOutCubic: function (t) { return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1 },\r\n        // accelerating from zero velocity \r\n        easeInQuart: function (t) { return t * t * t * t },\r\n        // decelerating to zero velocity \r\n        easeOutQuart: function (t) { return 1 - (--t) * t * t * t },\r\n        // acceleration until halfway, then deceleration\r\n        easeInOutQuart: function (t) { return t < .5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t },\r\n        // accelerating from zero velocity\r\n        easeInQuint: function (t) { return t * t * t * t * t },\r\n        // decelerating to zero velocity\r\n        easeOutQuint: function (t) { return 1 + (--t) * t * t * t * t },\r\n        // acceleration until halfway, then deceleration \r\n        easeInOutQuint: function (t) { return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t }\r\n    };\r\n})(jQuery);"],"sourceRoot":"/source/"}